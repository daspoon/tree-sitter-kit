/*

  Created by David Spooner

*/

import TreeSitter


/// A wrapper for the tree-sitter's *TSLanguage* struct.
public struct TSLanguage {
  /// The address of the TSLanguage structure given on initialization. Note that the content is statically allocated.
  let ptr : OpaquePointer

  /// A mapping of symbols (numeric node type ids) to Strings. Note that tree-sitter has implicit symbols 
  let symbolNames : [TSSymbol: String]

  /// Initlialize an instance with the result of the `tree_sitter_MyLang` function generated by tree-sitter in `parser.c`.
  public init(_ p: OpaquePointer) {
    ptr = p

    let symbols = (0 ..< ts_language_symbol_count(p)).map({TSSymbol($0)}) + [Self.errorSymbol, Self.errorRepeatSymbol]
    symbolNames = Dictionary(uniqueKeysWithValues: symbols
      .compactMap({ i in
        let symbol = TSSymbol(i)
        guard let cstring = ts_language_symbol_name(p, symbol)
          else { print("\(#function) -- no name for symbol \(symbol)"); return nil }
        let name = String(cString: cstring)
        return (symbol, name)
      })
    )
  }

  /// Return the name of the symbol for the given node.
  public func symbolName(for node: TSNode) -> String {
    let symbol = ts_node_grammar_symbol(node)
    guard let name = symbolNames[symbol]
      else { print("\(#function) -- no name for symbol \(symbol)"); return "UNKNOWN(\(symbol))" }
    return name
  }

  /// The built-in symbol for `ERROR`.
  public static var errorSymbol : TSSymbol
    { .max } // ts_builtin_sym_error

  /// The built-in symbol for `_ERROR`.
  public static var errorRepeatSymbol : TSSymbol
    { .max - 1 } // ts_builtin_sym_error_repeat
}
